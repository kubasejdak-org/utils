.Run_Valgrind_Linux:
  stage: valgrind
  image: ${DOCKER_IMAGE_VALGRIND}
  tags:
    - cet_build
  needs:
    - Linux_GCC_Debug_Build
  variables:
    GIT_STRATEGY: none
    AppArtifact: "Linux_GCC_Debug_Build"
  script:
    - cd ${AppArtifact}/bin
    - |
      valgrind \
      --leak-check=full \
      --show-leak-kinds=definite,indirect,possible \
      --fair-sched=yes \
      --track-origins=yes \
      --trace-children=yes \
      --error-markers=errstart,errend \
      --error-exitcode=123 \
      ./utils-tests -r verbose ${TestTags} || if [ $? -eq 123 ]; then exit 1; fi

Bits_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[bits]"

ExecAround_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[ExecAround]"

GlobalRegistry_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[GlobalRegistry]"

Logger_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[Logger]"

Property_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[Property]"

Result_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[Result]"

ScopedExit_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[ScopedExit]"

StateMachine_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[StateMachine]"

TcpConnection_Linux_Valgrind:
  extends: .Run_Valgrind_Linux
  variables:
    TestTags: "[TcpClient],[TcpServer],[TcpConnection]"
